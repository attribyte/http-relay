package com.attribyte.client;

option java_outer_classname = "ClientProtos";

message WireMessage {

   /* Paging information for the response, if available. */
   optional Paging paging = 1;

   /* The item sort field/direction.*/
   optional Sort sort = 2;

   /* A sequence of entries. */
   repeated Entry entries = 3;

   /* A sequence of sites. */
   repeated Site sites = 4;

   /* A sequence of authors. */
   repeated Author authors = 5;

   /* The query used to generate the page. */
   optional Query query = 6;

   /* A sequence of images. */
   repeated Image images = 7;

   /* Properties of the request/response origin client/server. */
   optional Origin origin = 8;

   /* Indicates an error response. */
   optional Error error = 9;

   /* Static content for display. */
   optional StaticPage staticPage = 10;

   /* Indicates an expired token. */
   optional bool expiredToken = 11;

   /* A token request. */
   optional TokenRequest tokenRequest = 12;

   /* A token response. */
   optional TokenResponse tokenResponse = 13;

   /* A token ping request. */
   optional TokenPing tokenPing = 14;

   /* The location from which a POSTed or PUT resource may be retrieved. */
   optional string resourceLocation = 15;

   /* An exclude filter. */
   optional ExcludeFilter excludeFilter = 16;

   /* A union of queries. Duplicates will be removed. */
   optional QueryUnion queryUnion = 17;

   /* Term frequency statistics. */
   optional TermFrequency termFrequency = 18;

   message Entry {

      /* The unique entry id. */
      optional uint64 id = 1;

      /* The entry title. */
      optional string title = 2;

      /* The entry summary. */
      optional string summary = 3;

      /* The entry content. */
      optional string content = 4;

      /* The entry extended content. */
      optional string extendedContent = 5;

      /* The (server-side) last modified time in milliseconds. */
      optional uint64 lastModifiedMillis = 6;

      /* The publisher-declared publish time in milliseconds. */
      optional uint64 publishTimeMillis = 7;

      /* The canonical (perma-) link. */
      optional string canonicalLink = 8;

      /* The parent site, if available. */
      optional Site parentSite = 9;

      /* The author, if available. */
      optional Author author = 10;

      /* The primary image for display, if available. */
      optional Image primaryImage = 11;

      /* The last modified time in formatted, human-readable, form. */
      optional string lastModifiedHuman = 12;

      /* The publish time in formatted, human-readable, form. */
      optional string publishTimeHuman = 13;

      /* A sequence of citations. */
      repeated Citation citations = 14;

      /* A sequence of similar entries. */
      repeated SimilarEntry similarEntries = 15;

      /* A score */
      optional float score = 16;

      /* A sequence of tags */
      repeated string tag = 17;

      /* A sequence of topics */
      repeated string topic = 18;

      /* A language code */
      optional string lang = 19;

      /* Indicates that the entry is permanent and should never expire. */
      optional bool permanent = 20;

      /* Alternate links to this entry. */
      repeated string altLink = 21;

      /* Additional images. */
      repeated Image images = 22;

      /* The unique entry id with namespace. */
      optional Id UID = 23;

      /* The entry is deleted. */
      optional bool deleted = 24;

      /* Arbitrary metadata associated with the entry. */
      repeated Meta meta = 25;

      /* Geographic data associated with the entry. */
      repeated GeoPoint geo = 26;

      /* The 'dek', if any. */
      optional string dek = 27;
   }

   message SimilarEntry {

      /* The entry. */
      required Entry entry = 1;

      /* An optional explanation. */
      optional string explain = 2;
   }

   message Site {

      /* The site URL. */
      optional string url = 1;

      /* A unique id assigned to the site. */
      optional uint64 id = 2;

      /* The site title. */
      optional string title = 3;

      /* The site description. */
      optional string description = 4;

      /* A URL/path to the site icon. May require client knowledge of base path (like a CDN base URL). */
      optional string iconPath = 5;

      /* Is this site blocked by the user? (Future) */
      optional bool blocked = 6;

      /* Is this site liked by the user? (Future) */
      optional bool liked = 7;

      /* Tags. */
      repeated string tag = 8;

      /* The unique id with namespace. */
      optional Id UID = 9;
   }

   message Author {

      /* A unique id assigned to the author. */
      optional uint64 id = 1;

      /* The author name for display. */
      optional string name = 2;

      /* A unique id assigned to the source (feed, for example) that combines with the author name to make a unique key. */
      optional uint64 sourceId = 3;

      /* A URL/path to an author icon. May require client knowledge of base path (like a CDN base URL). */
      optional string imagePath = 4;

      /* Is this author blocked by the user? (Future) */
      optional bool blocked = 5;

      /* Is this author liked by the user?  (Future) */
      optional bool liked = 6;

      /* The unique id with namespace. */
      optional Id UID = 7;

      /* The unique id assigned to the source with namespace. */
      optional Id sourceUID = 8;

      /* The (usually internal) name for the author. */
      optional string username = 9;

      /* Arbitrary metadata associated with the author. */
      repeated Meta meta = 10;
   }

   enum ImageType {

      /* Image is png. */
      PNG = 1;

      /* Image is jpg. */
      JPG = 2;

      /* Image is gif. */
      GIF = 3;

      /* Image is bitmap. */
      BMP = 4;

      /* Image is of unknown format. */
      UNKNOWN = 128;
   }

   message Image {

      /* The image title, if available. */
      optional string title = 1;

      /* The image 'alt' text, if available. */
      optional string altText = 2;

      /* The image URL. */
      optional string url = 3;

      /* The URL of the original image. */
      optional string originalSrc = 4;

      /* The width, if available. */
      optional uint32 width = 5;

      /* The height, if available. */
      optional uint32 height = 6;

      /* A description of the image size, if available. */
      optional string size = 7;

      /* A sequence of transforms of this image. */
      repeated ImageTransform transforms = 8;

      /* The actual image data, if requested/provided. */
      optional bytes binary = 9;

      /* The image type. */
      optional ImageType type = 10;
   }

   message ImageTransform {

      /* The URL for the transformed image. */
      optional string url = 1;

      /* The width, if available. */
      optional uint32 width = 2;

      /* The height, if available. */
      optional uint32 height = 3;

      /* A description of the image size, if available. */
      optional string size = 4;

      /* The actual image data, if requested/provided. */
      optional bytes binary = 5;

      /* The image type. */
      optional ImageType type = 6;
   }

   message Citation {

      enum Direction {

         /* Citation is inbound. */
         IN = 1;

         /* Citation is outbound, */
         OUT = 2;

         /* Citation is both in and outbound. */
         BOTH = 3;

         /* Citation is an (internal) Attribyte user. */
         USER = 4;

         /* Citation direction is unknown. */
         UNKNOWN_DIRECTION = 32;
      }

      enum Type {

         /* Citation is an entry linking in. */
         ENTRY = 1;

         /* Citation is a tweet with a link. */
         TWEET = 2;

         /* Citation is a host page. */
         HOST = 3;

         /* Citation is of unknown type. */
         UNKNOWN_TYPE = 4;
      }

      /* A unique id assigned to the citation. */
      optional uint64 id = 1;

      /* The ciation author, if available. */
      optional Author author = 2;

      /* The citation title, if available. */
      optional string title = 3;

      /* The citation link, if available. */
      optional string link = 4;

      /* The citation direction. */
      optional Direction direction = 6;

      /* A 'strength' indication. (Future) */
      optional float strength = 7;

      /* An image associated with the citation, if available. */
      optional Image image = 8;

      /* The citation type. */
      optional Type type = 9;

      /* An entry associated with the citation, if available. */
      optional Entry entry = 10;

      /* The unique entry id with namespace. */
      optional Id UID = 11;

      /* The citation is deleted. */
      optional bool deleted = 12;
   }

   message Sort {
      enum Direction {

         /* Sort descending. */
         DESC = 0;

         /* Sort ascending. */
         ASC = 1;

         /* Sort by top (best match). */
         TOP = 2;
      }

      /* The sort direction. */
      required Direction direction = 1;
   }

   message ExcludeFilter {

      /* Author ids to exclude from the query. */
      repeated uint64 authorIds = 1;

      /* Source hosts to exclude from the query. */
      repeated string sourceHosts = 2;

      /* Author names to exclude from the query */
      repeated string authorNames = 3;

      /* An optional sequence of author UIDs to constrain the query. */
      repeated Id authorUIDs = 4;
   }

   message Query {

      /* The query string. */
      optional string queryString = 1;

      enum Range {

         /* Range is one day. */
         DAY = 0;

         /* Range is one week. */
         WEEK = 1;

         /* Range is one month. */
         MONTH = 2;

         /* Range is one year. */
         YEAR = 3;

         /* No range is specified. */
         NONE = 4;
      }
      /* The range for the query. Default <code>None</code>. */
      optional Range range = 2 [default = NONE];

      /* An optional sequence of source ids to constrain the query. */
      repeated uint64 sourceIds = 3;

      /* An optional sequence of author ids to constrain the query. */
      repeated uint64 authorIds = 4;

      /* An optional sequence of author names to constrain the query. */
      repeated string authorNames = 5;

      /* An optional sequence of entry ids to constrain the query. */
      repeated string entryIds = 6;

      /* The range start timestamp in milliseconds. */
      optional uint64 rangeStartTimestamp = 7;

      /* The default search field. */
      optional string defaultField = 8;

      /* A list of terms, any of which may match. */
      repeated string anyTerms = 9;

      /* A list of terms, all of which must be present. */
      repeated string allTerms = 10;

      /* A list of terms which must not be present. */
      repeated string excludeTerms = 11;

      /* An optional name for this query. */
      optional string name = 12;

      /* Is the query active? (Future). */
      optional bool active = 13;

      /* A list of tags, any of which may match. */
      repeated string anyTags = 14;

      /* A list of tags, all of which must be present. */
      repeated string allTags = 15;

      /* A list of tags which must not be present. */
      repeated string excludeTags = 16;

      /* A list of hosts */
      repeated string hosts = 17;

      /* A list of domains */
      repeated string domains = 18;

      /* An optional sequence of source UIDs to constrain the query. */
      repeated Id sourceUIDs = 19;

      /* An optional sequence of author UIDs to constrain the query. */
      repeated Id authorUIDs = 20;

      /* An optional sequence of entry UIDs to constrain the query. */
      repeated Id entryUIDs = 21;

      /* An optional constraint for a timestamp field. */
      optional TimestampRange timestampRange = 22;

      /* A list of custom metadata, any of which may match. */
      repeated Meta anyMeta = 23;

      /* A list of custom metadata, all of which must be present. */
      repeated Meta allMeta = 24;

      /* A list of custom metadata which must not be present. */
      repeated Meta excludeMeta = 25;

      /* A list of topics, any of which may match. */
      repeated string anyTopics = 26;

      /* A list of topics, all of which must be present. */
      repeated string allTopics = 27;

      /* A list of topics which must not be present. */
      repeated string excludeTopics = 28;

      /* A list of tags used to select source ids */
      repeated string sourceTags = 29;

      /* A list of tags added by editors */
      repeated string editorTags = 30;
   }

   message QueryUnion {

      /* The queries for which results are combined. */
      repeated Query queries = 1;
   }

   message Paging {

      /* The current page number. */
      required uint32 currPage = 1;

      /* The number of items per page. */
      required uint32 perPage = 2;

      /* The total number of items, if known. */
      optional uint32 totalItems = 3;

      /* The total number of pages, if known. */
      optional uint32 totalPages = 4;

      /* The request start timestamp in milliseconds. */
      optional uint64 startTimestamp = 5;

      /* The base request URL for this response. */
      optional string baseURL = 6;

      /* Does this request have a page preceding this one? */
      optional bool hasPrevPage = 7;

      /* Does this request have a page following this one? */
      optional bool hasNextPage = 8;
   }

   message Origin {

      /* The timestamp origin timestamp in milliseconds. */
      optional uint64 currentTimestamp = 1;

      /* The timezone id. */
      optional string timezone = 2;

      /* The default date format */
      optional string dateFormat = 3;

      /* The default time format */
      optional string timeFormat = 4;

      /* The default date/time format */
      optional string dateTimeFormat = 5;

      /* The locale string */
      optional string locale = 6;

      /* The language */
      optional string lang = 7;

      /* A unique id that identifies the origin server */
      optional string serverId = 8;

      /* A URL to be used as the base for all images with relative URL. */
      optional string imageBaseURL = 9;

      /* A URL to be used as the base for all icons with relative URL. */
      optional string iconBaseURL = 10;
   }

   message StaticPage {

      /* The page content type. Generally, <code>text/html</code>. */
      optional string contentType = 1;

      /* The page content. */
      optional string content = 2;

      /* The page version */
      optional string version = 3;
   }

   message Error {

      /* The HTTP error code (200, 400, 404, 500). */
      optional uint32 code = 1;

      /* An error message that is safe for public display. */
      optional string publicMessage = 2;

      /* A message for internal use/debugging/error reporting. */
      optional string internalMessage = 3;

      /* A unique id used to correlate the error with server-side stack traces and logs. Safe for public display. */
      optional string errorId = 4;
   }

   message TokenRequest {

      /* The username. */
      optional string username = 1;

      /* The passphrase. */
      optional string passphrase = 2;
   }

   message TokenResponse {

      /* The assigned user id. */
      optional uint64 userId = 1;

      /* The token. */
      optional string token = 2;

      /* The token expire time. */
      optional uint64 expireTimestamp = 3;
   }

   message TokenPing {

      /* The user id assigned to the token for check. */
      optional uint64 userId = 1;

      /* The token to check. */
      optional string token = 2;
   }

    message Subscription {

      enum Type {
         FEED = 1;
         SEARCH = 2;
         TWITTER = 3;
         FACEBOOK = 4;
         UNKNOWN_SUBSCRIPTION_TYPE = 5;
      }

      /* A URL associated with the subscription. */
      optional string url = 1;

      /* A unique id for the subscription. */
      optional uint64 id = 2;

      /* The subscription title. */
      optional string title = 3;

      /* The subscription description. */
      optional string description = 4;

      /* A path to an icon for the subscription. */
      optional string iconPath = 5;

      /* The subscription type. */
      optional Type type = 6;

      /* Alternate URLs for the subscription. */
      repeated string altUrl = 7;

      /* The unique id with namespace. */
      optional Id UID = 8;
    }

   message Source {

      /* The source URL. */
      optional string url = 1;

      /* A unique id assigned to the source. */
      optional uint64 id = 2;

      /* The source title. */
      optional string title = 3;

      /* The source description. */
      optional string description = 4;

      /* Alternate URLs for the source. */
      repeated string altUrl = 5;

      /* The parent site, if any. */
      optional Site parentSite = 6;

      /* The parent subscription, if any. */
      optional Subscription parentSubscription = 7;

      /* Tags. */
      repeated string tag = 8;

      /* The unique id with namespace. */
      optional Id UID = 9;
   }

   message Replication {

      /* A sequence of authors. */
      repeated Author authors = 1;

      /* A sequence of sites. */
      repeated Site sites = 2;

      /* A sequence of subscriptions. */
      repeated Subscription subscriptions = 3;

      /* A sequence of sources. */
      repeated Source sources = 4;

      /* A sequence of entries. */
      repeated Entry entries = 5;

      /* Properties of the request/response origin client/server. */
      optional Origin origin = 6;

      /* Indicates an error response. */
      optional Error error = 7;
   }

   message Id {
      /* The id string. Must be unique in the namespace. */
      optional string id = 1;

      /* The namespace. */
      optional string namespace = 2;
   }

   message TermStats {

      /* The term. */
      optional string term = 1;

      /* The total number of times the word appears. */
      optional uint64 wordCount = 2;

      /* The word frequency. */
      optional double wordFrequency = 3;

      /* The total number of documents in which the word appears. */
      optional uint64 docCount = 4;

      /* The document frequency. */
      optional double docFrequency = 5;

      /* The inverse document frequency of this term from the set of documents. */
      optional double idf = 6;

      /* The TF-IDF using the word frequency for TF. */
      optional double wordFrequencyIDF = 7;

      /* The TF-IDF using the document frequency for TF. */
      optional double docFrequencyIDF = 8;
   }

   message TermFrequency {

      /* The index field. */
      optional string field = 1;

      /* An explanation of the analysis. */
      optional string explain = 2;

      /* The total number of documents in the index with the term. */
      optional uint64 totalIndexDocs = 3;

      /* The total number of documents examined. */
      optional uint64 totalDocs = 4;

      /* The total number of words examined. */
      optional uint64 totalWords = 5;

      /* The list of stats. */
      repeated TermStats stats = 6;
   }

   message TimestampRange {

      /* The start timestamp. */
      optional uint64 startTimestamp = 1;

      /* The end timestamp */
      optional uint64 endTimestamp = 2;

      /* Should the start timestamp be included in the interval? */
      optional bool includesStart = 3;

      /* Should the end timestamp be included in the interval? */
      optional bool includesEnd = 4;

      /* The timestamp field name. */
      optional string field = 5;
   }

   message Meta {

      /* The metadata name. */
      optional string name = 1;

      /* The metadata value. */
      optional string value = 2;

      /* The name for display. */
      optional string displayName = 3;
   }

   message GeoPoint {

      /* The longitude. */
      optional float lon = 1;

      /* The latitude. */
      optional float lat = 2;

      /* Associated metadata. */
      optional Meta meta = 3;
   }
}